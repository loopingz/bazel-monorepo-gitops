load("//lib:repo_utils.bzl", "download_toolchain_binary")
load('@aspect_bazel_lib//lib/private:repo_utils.bzl', 'repo_utils')

# version=https://dl.k8s.io/release/stable.txt
# https://dl.k8s.io/release/${version}/bin/darwin/arm64/kubectl https://dl.k8s.io/release/${version}/bin/darwin/arm64/kubectl.sha256
# https://dl.k8s.io/release/${version}/bin/darwin/amd64/kubectl https://dl.k8s.io/release/${version}/bin/darwin/amd64/kubectl.sha256
# https://dl.k8s.io/release/${version}/bin/linux/arm64/kubectl https://dl.k8s.io/release/${version}/bin/linux/arm64/kubectl.sha256
# https://dl.k8s.io/release/${version}/bin/linux/amd64/kubectl https://dl.k8s.io/release/${version}/bin/linux/amd64/kubectl.sha256

_binaries = {
    "1.31.0": {
        "darwin_arm64": ("https://dl.k8s.io/release/v1.31.0/bin/darwin/arm64/kubectl", "b7472df17a885574ed7273947a8a274c156357db21b981208e8e109b9ed4022d"),
        "darwin_amd64": ("https://dl.k8s.io/release/v1.31.0/bin/darwin/amd64/kubectl", "fb6e07a69acc4e16885eda55b524c13b84bfbcf78cfac8d6c378d2bad321e105"),
        "linux_amd64": ("https://dl.k8s.io/release/v1.31.0/bin/linux/amd64/kubectl", "7c27adc64a84d1c0cc3dcf7bf4b6e916cc00f3f576a2dbac51b318d926032437"),
        "linux_arm64": ("https://dl.k8s.io/release/v1.31.0/bin/linux/arm64/kubectl", "f42832db7d77897514639c6df38214a6d8ae1262ee34943364ec1ffaee6c009c"),
    },
}

DEFAULT_KUBECTL_VERSION = "1.31.0"
DEFAULT_KUBECTL_REPOSITORY = "kubectl"

KUBECTL_PLATFORMS = {
    "darwin_amd64": struct(
        release_platform = "macos-amd64",
        compatible_with = [
            "@platforms//os:macos",
            "@platforms//cpu:x86_64",
        ],
    ),
    "darwin_arm64": struct(
        release_platform = "macos-arm64",
        compatible_with = [
            "@platforms//os:macos",
            "@platforms//cpu:aarch64",
        ],
    ),
    "linux_amd64": struct(
        release_platform = "linux-amd64",
        compatible_with = [
            "@platforms//os:linux",
            "@platforms//cpu:x86_64",
        ],
    ),
    "linux_arm64": struct(
        release_platform = "linux-arm64",
        compatible_with = [
            "@platforms//os:linux",
            "@platforms//cpu:aarch64",
        ],
    ),
}

KubectlInfo = provider(
    doc = "Provide info for executing kubectl",
    fields = {
        "bin": "Executable kubectl binary",
    },
)

def _kubectl_toolchain_impl(ctx):
    binary = ctx.file.bin

    # Make the $(KUBECTL_BIN) variable available in places like genrules.
    # See https://docs.bazel.build/versions/main/be/make-variables.html#custom_variables
    template_variables = platform_common.TemplateVariableInfo({
        "KUBECTL_BIN": binary.path,
    })
    default_info = DefaultInfo(
        files = depset([binary]),
        runfiles = ctx.runfiles(files = [binary]),
    )
    kubectl_info = KubectlInfo(
        bin = binary,
    )

    # Export all the providers inside our ToolchainInfo
    # so the resolved_toolchain rule can grab and re-export them.
    toolchain_info = platform_common.ToolchainInfo(
        kubectlinfo = kubectl_info,
        template_variables = template_variables,
        default = default_info,
    )

    return [default_info, toolchain_info, template_variables]

kubectl_toolchain = rule(
    implementation = _kubectl_toolchain_impl,
    attrs = {
        "bin": attr.label(
            mandatory = True,
            allow_single_file = True,
            executable = True,
            cfg = "exec",
        ),
    },
)

def _kubectl_toolchains_repo_impl(rctx):
    # Expose a concrete toolchain which is the result of Bazel resolving the toolchain
    # for the execution or target platform.
    # Workaround for https://github.com/bazelbuild/bazel/issues/14009
    starlark_content = """# @generated by @rules_k8s_cd//kubectl_toolchain.bzl

# Forward all the providers
def _resolved_toolchain_impl(ctx):
    toolchain_info = ctx.toolchains["@rules_k8s_cd//lib:kubectl_toolchain_type"]
    return [
        toolchain_info,
        toolchain_info.default,
        toolchain_info.kubectlinfo,
        toolchain_info.template_variables,
    ]

# Copied from java_toolchain_alias
# https://cs.opensource.google/bazel/bazel/+/master:tools/jdk/java_toolchain_alias.bzl
resolved_toolchain = rule(
    implementation = _resolved_toolchain_impl,
    toolchains = ["@rules_k8s_cd//lib:kubectl_toolchain_type"],
    incompatible_use_toolchain_transition = True,
)
"""
    rctx.file("defs.bzl", starlark_content)

    build_content = """# @generated by @rules_k8s_cd//lib/private:kubectl_toolchain.bzl
#
# These can be registered in the workspace file or passed to --extra_toolchains flag.
# By default all these toolchains are registered by the kubectl_register_toolchains macro
# so you don't normally need to interact with these targets.

load(":defs.bzl", "resolved_toolchain")

resolved_toolchain(name = "resolved_toolchain", visibility = ["//visibility:public"])

"""

    for [platform, meta] in KUBECTL_PLATFORMS.items():
        build_content += """
toolchain(
    name = "{platform}_toolchain",
    exec_compatible_with = {compatible_with},
    toolchain = "@{user_repository_name}_{platform}//:kubectl_toolchain",
    toolchain_type = "@rules_k8s_cd//lib:kubectl_toolchain_type",
)
""".format(
            platform = platform,
            user_repository_name = rctx.attr.user_repository_name,
            compatible_with = meta.compatible_with,
        )

    # Base BUILD file for this repository
    rctx.file("BUILD.bazel", build_content)

kubectl_toolchains_repo = repository_rule(
    _kubectl_toolchains_repo_impl,
    doc = """Creates a repository with toolchain definitions for all known platforms
     which can be registered or selected.""",
    attrs = {
        "user_repository_name": attr.string(doc = "Base name for toolchains repository"),
    },
)

def _kubectl_platform_repo_impl(rctx):
    is_windows = rctx.attr.platform.startswith("windows_")
    meta = KUBECTL_PLATFORMS[rctx.attr.platform]
    release_platform = meta.release_platform if hasattr(meta, "release_platform") else rctx.attr.platform
    download_toolchain_binary(
        rctx = rctx,
        toolchain_name = "kubectl",
        platform = rctx.attr.platform,
        binary = _binaries[rctx.attr.version][rctx.attr.platform],
    )

kubectl_platform_repo = repository_rule(
    implementation = _kubectl_platform_repo_impl,
    doc = "Fetch external tools needed for kubectl toolchain",
    attrs = {
        "platform": attr.string(mandatory = True, values = KUBECTL_PLATFORMS.keys()),
        "version": attr.string(mandatory = False, default = DEFAULT_KUBECTL_VERSION, values = _binaries.keys()),
    },
)


def _kubectl_host_alias_repo(rctx):
    ext = ".exe" if repo_utils.is_windows(rctx) else ""

    # Base BUILD file for this repository
    rctx.file("BUILD.bazel", """# @generated by @rules_k8s_cd//lib/private:kubectl_toolchain.bzl
package(default_visibility = ["//visibility:public"])
print("HOST_ALIAS KUBECTL")
exports_files(["kubectl{ext}"])
""".format(
        ext = ext,
    ))

    rctx.symlink("../{name}_{platform}/kubectl{ext}".format(
        name = rctx.attr.name,
        platform = repo_utils.platform(rctx),
        ext = ext,
    ), "kubectl{ext}".format(ext = ext))

kubectl_host_alias_repo = repository_rule(
    _kubectl_host_alias_repo,
    doc = """Creates a repository with a shorter name meant for the host platform, which contains
    a BUILD.bazel file that exports symlinks to the host platform's binaries
    """,
)